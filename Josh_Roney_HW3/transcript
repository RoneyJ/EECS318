# //  QuestaSim-64 6.5f Jun 16 2010 Linux 4.15.0-36-generic
# //
# //  Copyright 1991-2010 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# vsim P3_processor 
# Loading work.P3_processor
add wave \
{sim/:P3_processor:clk } \
{sim/:P3_processor:fetch } \
{sim/:P3_processor:decode } \
{sim/:P3_processor:execute } \
{sim/:P3_processor:writeback } \
{sim/:P3_processor:opcode } \
{sim/:P3_processor:cc } \
{sim/:P3_processor:src_type } \
{sim/:P3_processor:dest_type } \
{sim/:P3_processor:src_addr } \
{sim/:P3_processor:dest_addr } \
{sim/:P3_processor:PC } \
{sim/:P3_processor:i } \
{sim/:P3_processor:j } \
{sim/:P3_processor:instr } \
{sim/:P3_processor:data } \
{sim/:P3_processor:PSR } \
{sim/:P3_processor:mem } \
{sim/:P3_processor:regfile } 
run
# entered fetch
# PSR = 00000, rg = xxxxxxxx
# entered decode
# PSR = 00000, rg = 00000000
# entered execute
# PSR = 00110, rg = 00000008
# entered fetch
# PSR = 00110, rg = 00000008
# entered decode
# PSR = 00110, rg = 00000000
# entered execute
# PSR = 00100, rg = 00000006
# entered fetch
# PSR = 00100, rg = 00000006
# entered decode
# PSR = 00100, rg = 00000000
# entered execute
# PSR = 00100, rg = 00000000
# entered fetch
# PSR = 00100, rg = 00000000
# entered decode
# PSR = 00100, rg = 00000008
# entered execute
# PSR = 00110, rg = 00000010
# entered fetch
# PSR = 00110, rg = 00000010
# entered decode
# PSR = 00110, rg = 00000006
# entered execute
# PSR = 00000, rg = 00000003
# entered fetch
# PSR = 00000, rg = 00000003
# entered decode
# PSR = 00000, rg = 00000000
# entered execute
# PSR = 00000, rg = 00000000
# entered fetch
# PSR = 00000, rg = 00000000
# entered decode
# PSR = 00000, rg = 00000000
# entered execute
# PSR = 00110, rg = 00000010
# entered fetch
# PSR = 00110, rg = 00000010
# entered decode
# PSR = 00110, rg = 00000010
# entered execute
# PSR = 00110, rg = 00000020
# entered fetch
# PSR = 00110, rg = 00000020
# entered decode
# PSR = 00110, rg = 00000003
# entered execute
# PSR = 00010, rg = 00000001
# entered fetch
# PSR = 00010, rg = 00000001
# entered decode
# PSR = 00010, rg = 00000000
# entered execute
# PSR = 00010, rg = 00000000
# entered fetch
# PSR = 00010, rg = 00000000
# entered decode
# PSR = 00010, rg = 00000010
# entered execute
# PSR = 00100, rg = 00000030
# entered fetch
# PSR = 00100, rg = 00000030
# entered decode
# PSR = 00100, rg = 00000020
# entered execute
# PSR = 00110, rg = 00000040
# entered fetch
# PSR = 00110, rg = 00000040
# entered decode
# PSR = 00110, rg = 00000001
# entered execute
# PSR = 10100, rg = 00000000
# entered fetch
# PSR = 10100, rg = 00000000
# entered decode
# PSR = 10100, rg = xxxxxxxx
# entered execute
# PSR = 10100, rg = xxxxxxxx
# entered fetch
# PSR = 10100, rg = xxxxxxxx
# entered decode
# PSR = 10100, rg = 00000040
# entered execute
# PSR = 00110, rg = 00000080
# entered fetch
# PSR = 00110, rg = 00000080
# entered decode
# PSR = 00110, rg = 00000000
# entered execute
# PSR = 10100, rg = 00000000
# entered fetch
# PSR = 10100, rg = 00000000
# entered decode
# PSR = 10100, rg = 00000000
run
# entered execute
# PSR = 00000, rg = 00000000
# entered writeback
# PSR = 00000, rg = 00000000
# entered fetch
# PSR = 00000, rg = 00000000
# entered decode
# PSR = 00000, rg = 00000030
# entered execute
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# PSR = 00000, rg = 00000030
# ** Note: $finish    : P3_processor.v(132)
#    Time: 125 fs  Iteration: 0  Instance: :P3_processor
# 1
# Break in Module P3_processor at P3_processor.v line 132
